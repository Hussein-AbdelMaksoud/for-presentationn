// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobDegredationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("CurrentDegree")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("FincialDegreeDate")
                        .HasColumnType("date");

                    b.Property<int>("FincialDegreeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("JobEndDate")
                        .HasColumnType("date");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("JobStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("FincialDegreeId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobDegredations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.AdKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("AdKinds");
                });

            modelBuilder.Entity("Server.Data.Entities.Allowance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AllowanceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int?>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("EmpId");

                    b.ToTable("Allowances");
                });

            modelBuilder.Entity("Server.Data.Entities.AllowanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AllowanceTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("educationalLevelID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("educationalLevelID");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Server.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SubAdID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubAdID");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Server.Data.Entities.EducationalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EducationalLevels");
                });

            modelBuilder.Entity("Server.Data.Entities.Employee", b =>
                {
                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AppointDN")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("AppointDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointDateTxt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoundDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("CombinationDate")
                        .HasColumnType("date");

                    b.Property<string>("CombinationDateTxt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("DegreeDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DisabilityFamilyMember")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisabilityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExistaceCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ExperanceDN")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ExperanceDate")
                        .HasColumnType("date");

                    b.Property<string>("ExperanceDateTxt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperanceDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("FJobDate")
                        .HasColumnType("date");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("GovernrateId")
                        .HasColumnType("int");

                    b.Property<int?>("HealthStateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExist")
                        .HasColumnType("bit");

                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobNameId")
                        .HasColumnType("int");

                    b.Property<int>("JobSubGroupId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LastBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LastYearBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NonExistanceTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ReAppointDate")
                        .HasColumnType("date");

                    b.Property<string>("ReAppointDateTxt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReservedDays")
                        .HasColumnType("int");

                    b.Property<int?>("ReservedMonths")
                        .HasColumnType("int");

                    b.Property<int?>("ReservedYears")
                        .HasColumnType("int");

                    b.Property<int?>("Serial")
                        .HasColumnType("int");

                    b.Property<decimal?>("SickBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SocialStateId")
                        .HasColumnType("int");

                    b.Property<int?>("SubAdId")
                        .HasColumnType("int");

                    b.Property<int?>("TaminNo")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("WorkDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("WorkDateFt")
                        .HasColumnType("date");

                    b.Property<string>("WorkDateFtTxt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDateTxt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("WorkEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("WorkEndDeDate")
                        .HasColumnType("date");

                    b.Property<int?>("WorkEndDec")
                        .HasColumnType("int");

                    b.Property<string>("YearBuy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearEmp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ExistaceCaseId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("GovernrateId");

                    b.HasIndex("HealthStateId");

                    b.HasIndex("JobGroupId");

                    b.HasIndex("JobNameId");

                    b.HasIndex("JobSubGroupId");

                    b.HasIndex("NonExistanceTypeId");

                    b.HasIndex("SocialStateId");

                    b.HasIndex("SubAdId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.ExistaceCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ExistanceCases");
                });

            modelBuilder.Entity("Server.Data.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Server.Data.Entities.FincialDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("FincialDegreeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FincialDegreeTypeId");

                    b.ToTable("FincialDegrees");
                });

            modelBuilder.Entity("Server.Data.Entities.FincialDegreeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FincialDegreeTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.FinicialZema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FinicialZemaTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("GraftComingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("GraftGoingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LastDecisionDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("NewSubmissionDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredZemaNo")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("SubmissionDate")
                        .HasColumnType("date");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("FinicialZemaTypeId");

                    b.ToTable("FinicialZemas");
                });

            modelBuilder.Entity("Server.Data.Entities.FinicialZemaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("FinicialZemaTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.GeneralAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("Level")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SectorID")
                        .HasColumnType("int");

                    b.Property<bool>("SpecialLevel")
                        .HasColumnType("bit");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SectorID");

                    b.ToTable("generalAds");
                });

            modelBuilder.Entity("Server.Data.Entities.Governrate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Governrates");
                });

            modelBuilder.Entity("Server.Data.Entities.HealthState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("HealthStates");
                });

            modelBuilder.Entity("Server.Data.Entities.JobGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("JobGroups");
                });

            modelBuilder.Entity("Server.Data.Entities.JobName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("JobMission")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("JobSubGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("JobSubGroupId");

                    b.ToTable("JobNames");
                });

            modelBuilder.Entity("Server.Data.Entities.JobSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("JobGroupsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("JobGroupsId");

                    b.ToTable("JobSubGroups");
                });

            modelBuilder.Entity("Server.Data.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.Lagna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int?>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("Lagnas");
                });

            modelBuilder.Entity("Server.Data.Entities.MandateData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int?>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Geha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMandated")
                        .HasColumnType("bit");

                    b.Property<string>("MandateJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MandateTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("MandateTypeId");

                    b.ToTable("MandateDatas");
                });

            modelBuilder.Entity("Server.Data.Entities.MandateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("MandateTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.MilitaryState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("CurrentMilitaryState")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MilitaryStateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("MilitaryStateTypeId");

                    b.ToTable("MilitaryStates");
                });

            modelBuilder.Entity("Server.Data.Entities.MilitaryStateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("MilitaryStateTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.NonExistanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("NonExistanceTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CancelationDate")
                        .HasColumnType("date");

                    b.Property<int?>("CancelationDecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("CancelationReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int?>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int?>("PenaltyCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("PenaltyCaseId");

                    b.HasIndex("PenaltyTypeId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("Server.Data.Entities.PenaltyCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PenaltyCases");
                });

            modelBuilder.Entity("Server.Data.Entities.PenaltyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PenaltyTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.QualGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("QualGrades");
                });

            modelBuilder.Entity("Server.Data.Entities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateID")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int>("DecisionNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("GraduationDate")
                        .HasColumnType("date");

                    b.Property<bool>("LastQual")
                        .HasColumnType("bit");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QualGradeID")
                        .HasColumnType("int");

                    b.Property<string>("QualPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateID");

                    b.HasIndex("NationalID");

                    b.HasIndex("QualGradeID");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Server.Data.Entities.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Agr_Mokamel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Agr_Wasefy")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("All_Badalt")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("All_Mok")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Badalat_Okhra")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Hafez_Taawedy")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Hafez_Thabet")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("M_asasy30")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MoKafat_Emt7anat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Server.Data.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Server.Data.Entities.SocialState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SocialStates");
                });

            modelBuilder.Entity("Server.Data.Entities.SubAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralAdId")
                        .HasColumnType("int");

                    b.Property<bool>("Level")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("SpecialLevel")
                        .HasColumnType("bit");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("GeneralAdId");

                    b.ToTable("subAds");
                });

            modelBuilder.Entity("Server.Data.Entities.ThanksLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int?>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Geha")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LetterName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("ThanksLetters");
                });

            modelBuilder.Entity("Server.Data.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Server.Data.Entities.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<int?>("DecisionNo")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("Ended")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Place")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("VacationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("VacationTypeId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Server.Data.Entities.VacationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VacationTypes");
                });

            modelBuilder.Entity("Server.Data.Entities.YearReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("Degree")
                        .HasColumnType("float");

                    b.Property<string>("EmpId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("GradeId");

                    b.ToTable("YearReports");
                });

            modelBuilder.Entity("Server.Data.Entities.YearReportGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("YearReportGrades");
                });

            modelBuilder.Entity("Server.Data.Entities.YearReportLaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Geha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("YearReportLaws");
                });

            modelBuilder.Entity("JobDegredationData", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("JobDegredationData")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.FincialDegree", "FincialDegree")
                        .WithMany("JobDegredationData")
                        .HasForeignKey("FincialDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.JobType", "JobType")
                        .WithMany("JobDegredationData")
                        .HasForeignKey("JobTypeId");

                    b.Navigation("Employee");

                    b.Navigation("FincialDegree");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Server.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Server.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Server.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Data.Entities.Allowance", b =>
                {
                    b.HasOne("Server.Data.Entities.AllowanceType", "AllowanceType")
                        .WithMany("Allowances")
                        .HasForeignKey("AllowanceTypeId");

                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("Allowances")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllowanceType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Data.Entities.Certificate", b =>
                {
                    b.HasOne("Server.Data.Entities.EducationalLevel", "educationalLevel")
                        .WithMany("Certificates")
                        .HasForeignKey("educationalLevelID");

                    b.Navigation("educationalLevel");
                });

            modelBuilder.Entity("Server.Data.Entities.Department", b =>
                {
                    b.HasOne("Server.Data.Entities.SubAd", "SubAd")
                        .WithMany("Departments")
                        .HasForeignKey("SubAdID");

                    b.Navigation("SubAd");
                });

            modelBuilder.Entity("Server.Data.Entities.Employee", b =>
                {
                    b.HasOne("Server.Data.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Server.Data.Entities.ExistaceCase", "ExistaceCase")
                        .WithMany("Employees")
                        .HasForeignKey("ExistaceCaseId");

                    b.HasOne("Server.Data.Entities.Faculty", "Faculty")
                        .WithMany("Employees")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.Governrate", "Governrate")
                        .WithMany("Employees")
                        .HasForeignKey("GovernrateId");

                    b.HasOne("Server.Data.Entities.HealthState", "HealthState")
                        .WithMany("Employees")
                        .HasForeignKey("HealthStateId");

                    b.HasOne("Server.Data.Entities.JobGroup", "JobGroup")
                        .WithMany("Employees")
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.JobName", "JobName")
                        .WithMany("Employees")
                        .HasForeignKey("JobNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.JobSubGroup", "JobSubGroup")
                        .WithMany("Employees")
                        .HasForeignKey("JobSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.NonExistanceType", "NonExistanceType")
                        .WithMany("Employees")
                        .HasForeignKey("NonExistanceTypeId");

                    b.HasOne("Server.Data.Entities.SocialState", "SocialState")
                        .WithMany("Employees")
                        .HasForeignKey("SocialStateId");

                    b.HasOne("Server.Data.Entities.SubAd", "SubAd")
                        .WithMany("Employees")
                        .HasForeignKey("SubAdId");

                    b.Navigation("Department");

                    b.Navigation("ExistaceCase");

                    b.Navigation("Faculty");

                    b.Navigation("Governrate");

                    b.Navigation("HealthState");

                    b.Navigation("JobGroup");

                    b.Navigation("JobName");

                    b.Navigation("JobSubGroup");

                    b.Navigation("NonExistanceType");

                    b.Navigation("SocialState");

                    b.Navigation("SubAd");
                });

            modelBuilder.Entity("Server.Data.Entities.FincialDegree", b =>
                {
                    b.HasOne("Server.Data.Entities.FincialDegreeType", "FincialDegreeType")
                        .WithMany("FincialDegree")
                        .HasForeignKey("FincialDegreeTypeId");

                    b.Navigation("FincialDegreeType");
                });

            modelBuilder.Entity("Server.Data.Entities.FinicialZema", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("FinicialZemas")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.FinicialZemaType", "FinicialZemaType")
                        .WithMany("FinicialZemas")
                        .HasForeignKey("FinicialZemaTypeId");

                    b.Navigation("Employee");

                    b.Navigation("FinicialZemaType");
                });

            modelBuilder.Entity("Server.Data.Entities.GeneralAd", b =>
                {
                    b.HasOne("Server.Data.Entities.Sector", "Sector")
                        .WithMany("GeneralAds")
                        .HasForeignKey("SectorID");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Server.Data.Entities.JobName", b =>
                {
                    b.HasOne("Server.Data.Entities.JobSubGroup", "JobSubGroup")
                        .WithMany("JobNames")
                        .HasForeignKey("JobSubGroupId");

                    b.Navigation("JobSubGroup");
                });

            modelBuilder.Entity("Server.Data.Entities.JobSubGroup", b =>
                {
                    b.HasOne("Server.Data.Entities.JobGroup", "JobGroups")
                        .WithMany("JobSubGroups")
                        .HasForeignKey("JobGroupsId");

                    b.Navigation("JobGroups");
                });

            modelBuilder.Entity("Server.Data.Entities.Lagna", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("Lagnas")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Data.Entities.MandateData", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("MandateDatas")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.Faculty", "Faculty")
                        .WithMany("MandateData")
                        .HasForeignKey("FacultyId");

                    b.HasOne("Server.Data.Entities.MandateType", "MandateType")
                        .WithMany("MandateData")
                        .HasForeignKey("MandateTypeId");

                    b.Navigation("Employee");

                    b.Navigation("Faculty");

                    b.Navigation("MandateType");
                });

            modelBuilder.Entity("Server.Data.Entities.MilitaryState", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("MilitaryStates")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.MilitaryStateType", "MilitaryStateType")
                        .WithMany("MilitaryState")
                        .HasForeignKey("MilitaryStateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("MilitaryStateType");
                });

            modelBuilder.Entity("Server.Data.Entities.Penalty", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("Penalties")
                        .HasForeignKey("EmpId");

                    b.HasOne("Server.Data.Entities.PenaltyCase", "PenaltyCase")
                        .WithMany("Penalties")
                        .HasForeignKey("PenaltyCaseId");

                    b.HasOne("Server.Data.Entities.PenaltyType", "PenaltyType")
                        .WithMany("Penalties")
                        .HasForeignKey("PenaltyTypeId");

                    b.Navigation("Employee");

                    b.Navigation("PenaltyCase");

                    b.Navigation("PenaltyType");
                });

            modelBuilder.Entity("Server.Data.Entities.Qualification", b =>
                {
                    b.HasOne("Server.Data.Entities.Certificate", "Certificate")
                        .WithMany("Qualifications")
                        .HasForeignKey("CertificateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("Qualifications")
                        .HasForeignKey("NationalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.QualGrade", "QualGrade")
                        .WithMany("Qualifications")
                        .HasForeignKey("QualGradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Employee");

                    b.Navigation("QualGrade");
                });

            modelBuilder.Entity("Server.Data.Entities.Salary", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "NationalId")
                        .WithMany("Salaries")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NationalId");
                });

            modelBuilder.Entity("Server.Data.Entities.SubAd", b =>
                {
                    b.HasOne("Server.Data.Entities.GeneralAd", "GeneralAd")
                        .WithMany("SubAds")
                        .HasForeignKey("GeneralAdId");

                    b.Navigation("GeneralAd");
                });

            modelBuilder.Entity("Server.Data.Entities.ThanksLetter", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "NationalId")
                        .WithMany("ThanksLetters")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NationalId");
                });

            modelBuilder.Entity("Server.Data.Entities.Training", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("Trainings")
                        .HasForeignKey("NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Data.Entities.Vacation", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "NationalId")
                        .WithMany("Vacations")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.VacationType", "VacationType")
                        .WithMany("Vacations")
                        .HasForeignKey("VacationTypeId");

                    b.Navigation("NationalId");

                    b.Navigation("VacationType");
                });

            modelBuilder.Entity("Server.Data.Entities.YearReport", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("YearReports")
                        .HasForeignKey("EmpId");

                    b.HasOne("Server.Data.Entities.YearReportGrade", "YearReportGrade")
                        .WithMany("YearReports")
                        .HasForeignKey("GradeId");

                    b.Navigation("Employee");

                    b.Navigation("YearReportGrade");
                });

            modelBuilder.Entity("Server.Data.Entities.YearReportLaw", b =>
                {
                    b.HasOne("Server.Data.Entities.Employee", "Employee")
                        .WithMany("YearReportLaws")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Data.Entities.AllowanceType", b =>
                {
                    b.Navigation("Allowances");
                });

            modelBuilder.Entity("Server.Data.Entities.Certificate", b =>
                {
                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Server.Data.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.EducationalLevel", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("Server.Data.Entities.Employee", b =>
                {
                    b.Navigation("Allowances");

                    b.Navigation("FinicialZemas");

                    b.Navigation("JobDegredationData");

                    b.Navigation("Lagnas");

                    b.Navigation("MandateDatas");

                    b.Navigation("MilitaryStates");

                    b.Navigation("Penalties");

                    b.Navigation("Qualifications");

                    b.Navigation("Salaries");

                    b.Navigation("ThanksLetters");

                    b.Navigation("Trainings");

                    b.Navigation("Vacations");

                    b.Navigation("YearReportLaws");

                    b.Navigation("YearReports");
                });

            modelBuilder.Entity("Server.Data.Entities.ExistaceCase", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.Faculty", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("MandateData");
                });

            modelBuilder.Entity("Server.Data.Entities.FincialDegree", b =>
                {
                    b.Navigation("JobDegredationData");
                });

            modelBuilder.Entity("Server.Data.Entities.FincialDegreeType", b =>
                {
                    b.Navigation("FincialDegree");
                });

            modelBuilder.Entity("Server.Data.Entities.FinicialZemaType", b =>
                {
                    b.Navigation("FinicialZemas");
                });

            modelBuilder.Entity("Server.Data.Entities.GeneralAd", b =>
                {
                    b.Navigation("SubAds");
                });

            modelBuilder.Entity("Server.Data.Entities.Governrate", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.HealthState", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.JobGroup", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JobSubGroups");
                });

            modelBuilder.Entity("Server.Data.Entities.JobName", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.JobSubGroup", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JobNames");
                });

            modelBuilder.Entity("Server.Data.Entities.JobType", b =>
                {
                    b.Navigation("JobDegredationData");
                });

            modelBuilder.Entity("Server.Data.Entities.MandateType", b =>
                {
                    b.Navigation("MandateData");
                });

            modelBuilder.Entity("Server.Data.Entities.MilitaryStateType", b =>
                {
                    b.Navigation("MilitaryState");
                });

            modelBuilder.Entity("Server.Data.Entities.NonExistanceType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.PenaltyCase", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("Server.Data.Entities.PenaltyType", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("Server.Data.Entities.QualGrade", b =>
                {
                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Server.Data.Entities.Sector", b =>
                {
                    b.Navigation("GeneralAds");
                });

            modelBuilder.Entity("Server.Data.Entities.SocialState", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.SubAd", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Data.Entities.VacationType", b =>
                {
                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("Server.Data.Entities.YearReportGrade", b =>
                {
                    b.Navigation("YearReports");
                });
#pragma warning restore 612, 618
        }
    }
}
